{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\GitHub\\\\react-crypto-rate\\\\src\\\\Crypto.js\";\nimport React, { Component } from 'react';\nimport './Crypto.css';\nimport axios from 'axios';\nimport CryptoList from './CryptoList';\n\nclass Crypto extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCryptoData = () => {\n      axios.get('https://blockchain.info/pl/ticker').then(res => {\n        const tickers = res.data;\n        this.setState(state => {\n          let newCryptoList = [];\n\n          for (const [ticker, cryptoRate] of Object.entries(tickers)) {\n            let lastCryptoObj = state.cryptoList.find(cryptoObj => {\n              return cryptoObj.currency === ticker;\n            });\n            let newCryptoObj = {\n              currency: ticker,\n              symbol: cryptoRate.symbol,\n              buy: cryptoRate.buy,\n              sell: cryptoRate.sell,\n              lastRate: cryptoRate.last\n            };\n\n            if (lastCryptoObj !== undefined) {\n              if (newCryptoObj.lastRate > lastCryptoObj.lastRate) {\n                newCryptoObj.cssClass = 'green';\n                newCryptoObj.htmlArray = String.fromCharCode(8593);\n              } else if (newCryptoObj.lastRate < lastCryptoObj.lastRate) {\n                newCryptoObj.cssClass = 'red';\n                newCryptoObj.htmlArray = String.fromCharCode(8595);\n              } else {\n                newCryptoObj.cssClass = 'blue';\n                newCryptoObj.htmlArray = String.fromCharCode(8596);\n              }\n            } else {\n              newCryptoObj.cssClass = 'blue';\n              newCryptoObj.htmlArray = String.fromCharCode(8596);\n            }\n\n            newCryptoList.push(newCryptoObj);\n          }\n\n          return {\n            cryptoList: newCryptoList\n          };\n        });\n        this.filterCryptoList();\n      });\n    };\n\n    this.filterCryptoList = () => {\n      this._inputFilter.value = this._inputFilter.value.trim().toUpperCase();\n      this.setState(state => {\n        let newFilteredCryptoList = state.cryptoList.filter(cryptoObj => {\n          return cryptoObj.currency.startsWith(this._inputFilter.value);\n        });\n        return {\n          filteredCryptoList: newFilteredCryptoList\n        };\n      });\n    };\n\n    this.state = {\n      cryptoList: [],\n      filteredCryptoList: []\n    };\n  }\n\n  componentDidMount() {\n    this.getCryptoData();\n    this.timerID = setInterval(() => this.getCryptoData(), 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Crypto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      ref: element => this._inputFilter = element,\n      onChange: this.filterCryptoList,\n      type: \"text\",\n      placeholder: \"Filter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CryptoList, {\n      cryptoList: this.state.filteredCryptoList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Crypto;","map":{"version":3,"sources":["C:/Users/Admin/Documents/GitHub/react-crypto-rate/src/Crypto.js"],"names":["React","Component","axios","CryptoList","Crypto","constructor","props","getCryptoData","get","then","res","tickers","data","setState","state","newCryptoList","ticker","cryptoRate","Object","entries","lastCryptoObj","cryptoList","find","cryptoObj","currency","newCryptoObj","symbol","buy","sell","lastRate","last","undefined","cssClass","htmlArray","String","fromCharCode","push","filterCryptoList","_inputFilter","value","trim","toUpperCase","newFilteredCryptoList","filter","startsWith","filteredCryptoList","componentDidMount","timerID","setInterval","componentWillUnmount","clearInterval","render","element"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAE3BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAkBnBC,aAlBmB,GAkBH,MAAM;AAElBL,MAAAA,KAAK,CAACM,GAAN,CAAU,mCAAV,EACKC,IADL,CACUC,GAAG,IAAI;AACT,cAAMC,OAAO,GAAGD,GAAG,CAACE,IAApB;AAEA,aAAKC,QAAL,CAAeC,KAAD,IAAW;AACrB,cAAIC,aAAa,GAAG,EAApB;;AAEA,eAAK,MAAM,CAACC,MAAD,EAASC,UAAT,CAAX,IAAmCC,MAAM,CAACC,OAAP,CAAeR,OAAf,CAAnC,EAA4D;AAExD,gBAAIS,aAAa,GAAGN,KAAK,CAACO,UAAN,CAAiBC,IAAjB,CAAuBC,SAAD,IAAe;AACrD,qBAAQA,SAAS,CAACC,QAAV,KAAuBR,MAA/B;AACH,aAFmB,CAApB;AAIA,gBAAIS,YAAY,GAAG;AACfD,cAAAA,QAAQ,EAAER,MADK;AAEfU,cAAAA,MAAM,EAAET,UAAU,CAACS,MAFJ;AAGfC,cAAAA,GAAG,EAAEV,UAAU,CAACU,GAHD;AAIfC,cAAAA,IAAI,EAAEX,UAAU,CAACW,IAJF;AAKfC,cAAAA,QAAQ,EAAEZ,UAAU,CAACa;AALN,aAAnB;;AAQA,gBAAIV,aAAa,KAAKW,SAAtB,EAAiC;AAE7B,kBAAIN,YAAY,CAACI,QAAb,GAAwBT,aAAa,CAACS,QAA1C,EAAoD;AAChDJ,gBAAAA,YAAY,CAACO,QAAb,GAAwB,OAAxB;AACAP,gBAAAA,YAAY,CAACQ,SAAb,GAAyBC,MAAM,CAACC,YAAP,CAAoB,IAApB,CAAzB;AACH,eAHD,MAIK,IAAIV,YAAY,CAACI,QAAb,GAAwBT,aAAa,CAACS,QAA1C,EAAoD;AACrDJ,gBAAAA,YAAY,CAACO,QAAb,GAAwB,KAAxB;AACAP,gBAAAA,YAAY,CAACQ,SAAb,GAAyBC,MAAM,CAACC,YAAP,CAAoB,IAApB,CAAzB;AACH,eAHI,MAIA;AACDV,gBAAAA,YAAY,CAACO,QAAb,GAAwB,MAAxB;AACAP,gBAAAA,YAAY,CAACQ,SAAb,GAAyBC,MAAM,CAACC,YAAP,CAAoB,IAApB,CAAzB;AACH;AAEJ,aAfD,MAgBK;AACDV,cAAAA,YAAY,CAACO,QAAb,GAAwB,MAAxB;AACAP,cAAAA,YAAY,CAACQ,SAAb,GAAyBC,MAAM,CAACC,YAAP,CAAoB,IAApB,CAAzB;AACH;;AAEDpB,YAAAA,aAAa,CAACqB,IAAd,CAAmBX,YAAnB;AACH;;AACD,iBAAQ;AAEJJ,YAAAA,UAAU,EAAEN;AAFR,WAAR;AAIH,SA5CD;AA8CA,aAAKsB,gBAAL;AAEH,OApDL;AAsDH,KA1EkB;;AAAA,SA4EnBA,gBA5EmB,GA4EA,MAAM;AACrB,WAAKC,YAAL,CAAkBC,KAAlB,GAA0B,KAAKD,YAAL,CAAkBC,KAAlB,CAAwBC,IAAxB,GAA+BC,WAA/B,EAA1B;AAEA,WAAK5B,QAAL,CAAeC,KAAD,IAAW;AACrB,YAAI4B,qBAAqB,GAAG5B,KAAK,CAACO,UAAN,CAAiBsB,MAAjB,CAAwBpB,SAAS,IAAI;AAC7D,iBAAQA,SAAS,CAACC,QAAV,CAAmBoB,UAAnB,CAA8B,KAAKN,YAAL,CAAkBC,KAAhD,CAAR;AACH,SAF2B,CAA5B;AAIA,eAAQ;AACJM,UAAAA,kBAAkB,EAAEH;AADhB,SAAR;AAGH,OARD;AAUH,KAzFkB;;AAGf,SAAK5B,KAAL,GAAa;AACTO,MAAAA,UAAU,EAAE,EADH;AAETwB,MAAAA,kBAAkB,EAAE;AAFX,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKvC,aAAL;AACA,SAAKwC,OAAL,GAAeC,WAAW,CAAC,MAAM,KAAKzC,aAAL,EAAP,EAA6B,IAA7B,CAA1B;AACH;;AAED0C,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKH,OAAN,CAAb;AACH;;AA2EDI,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,GAAG,EAAEC,OAAO,IAAI,KAAKd,YAAL,GAAoBc,OAA3C;AAAoD,MAAA,QAAQ,EAAE,KAAKf,gBAAnE;AAAqF,MAAA,IAAI,EAAC,MAA1F;AAAiG,MAAA,WAAW,EAAC,QAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAE,KAAKvB,KAAL,CAAW+B,kBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AApG0B;;AAuG/B,eAAezC,MAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './Crypto.css';\r\n\r\nimport axios from 'axios';\r\nimport CryptoList from './CryptoList';\r\n\r\nclass Crypto extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            cryptoList: [],\r\n            filteredCryptoList: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCryptoData();\r\n        this.timerID = setInterval(() => this.getCryptoData(), 5000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    getCryptoData = () => {\r\n\r\n        axios.get('https://blockchain.info/pl/ticker')\r\n            .then(res => {\r\n                const tickers = res.data;\r\n\r\n                this.setState((state) => {\r\n                    let newCryptoList = [];\r\n\r\n                    for (const [ticker, cryptoRate] of Object.entries(tickers)) {\r\n\r\n                        let lastCryptoObj = state.cryptoList.find((cryptoObj) => {\r\n                            return (cryptoObj.currency === ticker);\r\n                        });\r\n\r\n                        let newCryptoObj = {\r\n                            currency: ticker,\r\n                            symbol: cryptoRate.symbol,\r\n                            buy: cryptoRate.buy,\r\n                            sell: cryptoRate.sell,\r\n                            lastRate: cryptoRate.last\r\n                        }\r\n\r\n                        if (lastCryptoObj !== undefined) {\r\n\r\n                            if (newCryptoObj.lastRate > lastCryptoObj.lastRate) {\r\n                                newCryptoObj.cssClass = 'green';\r\n                                newCryptoObj.htmlArray = String.fromCharCode(8593);\r\n                            }\r\n                            else if (newCryptoObj.lastRate < lastCryptoObj.lastRate) {\r\n                                newCryptoObj.cssClass = 'red';\r\n                                newCryptoObj.htmlArray = String.fromCharCode(8595);\r\n                            }\r\n                            else {\r\n                                newCryptoObj.cssClass = 'blue';\r\n                                newCryptoObj.htmlArray = String.fromCharCode(8596);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            newCryptoObj.cssClass = 'blue';\r\n                            newCryptoObj.htmlArray = String.fromCharCode(8596);\r\n                        }\r\n\r\n                        newCryptoList.push(newCryptoObj);\r\n                    }\r\n                    return ({\r\n\r\n                        cryptoList: newCryptoList\r\n                    });\r\n                });\r\n\r\n                this.filterCryptoList();\r\n\r\n            });\r\n\r\n    }\r\n\r\n    filterCryptoList = () => {\r\n        this._inputFilter.value = this._inputFilter.value.trim().toUpperCase();\r\n\r\n        this.setState((state) => {\r\n            let newFilteredCryptoList = state.cryptoList.filter(cryptoObj => {\r\n                return (cryptoObj.currency.startsWith(this._inputFilter.value))\r\n            })\r\n\r\n            return ({\r\n                filteredCryptoList: newFilteredCryptoList\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Crypto\">\r\n                <input ref={element => this._inputFilter = element} onChange={this.filterCryptoList} type=\"text\" placeholder=\"Filter\" />\r\n                <CryptoList cryptoList={this.state.filteredCryptoList} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Crypto;"]},"metadata":{},"sourceType":"module"}